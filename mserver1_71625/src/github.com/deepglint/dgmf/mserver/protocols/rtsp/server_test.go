package rtsp

import (
	// "fmt"
	"github.com/deepglint/dgmf/mserver/core"
	"net"
	"strings"
	"testing"
)

func TestBefore(test *testing.T) {
	pool := core.GetESPool()
	pool.AddInput("test0", true, "udp://127.0.0.1:9002")
	pool.AddOutput("test0", true, "rtsp", true)
	pool.AddSession("test0", true, "11223344", "127.0.0.1:9010", "tcp", "rtsp")
}

func TestOptions(test *testing.T) {
	ch := make(chan int)
	go func() {
		listener, _ := net.Listen("tcp", "0.0.0.0:8554")
		ch <- 1
		connect, _ := listener.Accept()
		server := RTSPServer{}
		request := RTSPRequest{
			RequestLine: RTSPRequestLine{
				Method:      "OPTIONS",
				RequestURI:  "rtsp://127.0.0.1:8554/live/test0",
				RTSPVersion: RTSP_VERSION,
			},
			CSeq: 4,
		}
		sessionCtx := &SessionContext{
			SessionId: "11223344",
			StreamId:  "",
		}
		server.options(connect, request, sessionCtx, false)
		ch <- 1

	}()

	<-ch
	connect, _ := net.Dial("tcp", "127.0.0.1:8554")
	connect.Write([]byte{0x00, 0x01})

	<-ch
	buf := make([]byte, REQ_RSP_SIZE)
	n, err := connect.Read(buf)
	if err != nil {
		test.Error()
	}
	if !strings.EqualFold("RTSP/1.0 200 OK\r\nCSeq: 4\r\nPublic: OPTIONS, DESCRIBE, PLAY, SETUP, TEARDOWN\r\nServer: "+MANUFACTURER+"\r\nSession: 11223344\r\n\r\n", string(buf[:n])) {
		test.Error()
	}
	connect.Close()
}

func TestDescribe(test *testing.T) {
	ch := make(chan int)
	go func() {
		listener, _ := net.Listen("tcp", "0.0.0.0:8555")
		ch <- 1
		connect, _ := listener.Accept()
		server := RTSPServer{}
		request := RTSPRequest{
			RequestLine: RTSPRequestLine{
				Method:      "DESCRIBE",
				RequestURI:  "rtsp://127.0.0.1:8554/live/test0",
				RTSPVersion: RTSP_VERSION,
			},
			CSeq: 5,
		}
		sessionCtx := &SessionContext{
			SessionId: "11223344",
			StreamId:  "",
		}
		server.describe(connect, request, sessionCtx, false)
		ch <- 1

	}()

	<-ch
	connect, _ := net.Dial("tcp", "127.0.0.1:8555")
	connect.Write([]byte{0x00, 0x01})

	<-ch
	buf := make([]byte, REQ_RSP_SIZE)
	n, err := connect.Read(buf)
	if err != nil {
		test.Error()
	}
	if !strings.EqualFold("RTSP/1.0 200 OK\r\nCSeq: 5\r\nServer: "+MANUFACTURER+"\r\nContent-Base: rtsp://127.0.0.1:8554/test0/\r\nContent-Length: 311\r\nContent-Type: application/sdp\r\nSession: 11223344\r\n\r\nv=0\r\no=- 0 0 IN IP4 0.0.0.0\r\ns=H.264 Video, streamed by MServer/0.8.0 (Deep Glint Inc. 2016.08.31)\r\nc=IN IP4 0.0.0.0\r\nt=0 0\r\nm=video 0 RTP/AVP 96\r\nb=AS:500\r\na=tool:"+MANUFACTURER+"\r\na=rtpmap:96 H264/90000\r\na=fmtp:96 profile-level-id=1\r\na=control:rtsp://127.0.0.1:8554/test0/trackID=1\r\n", string(buf[:n])) {
		test.Error()
	}
	connect.Close()
}

func TestSetupTCP(test *testing.T) {
	ch := make(chan int)
	go func() {
		listener, _ := net.Listen("tcp", "0.0.0.0:8556")
		ch <- 1
		connect, _ := listener.Accept()
		server := RTSPServer{}
		request := RTSPRequest{
			RequestLine: RTSPRequestLine{
				Method:      "SETUP",
				RequestURI:  "rtsp://127.0.0.1:8554/live/test0",
				RTSPVersion: RTSP_VERSION,
			},
			CSeq:      6,
			Transport: "RTP/AVP/TCP;unicast;interleaved=0-1",
		}
		sessionCtx := &SessionContext{
			SessionId: "11223344",
			StreamId:  "",
		}
		server.setup(connect, request, sessionCtx, false)
		ch <- 1

	}()

	<-ch
	connect, _ := net.Dial("tcp", "127.0.0.1:8556")
	connect.Write([]byte{0x00, 0x01})

	<-ch
	buf := make([]byte, REQ_RSP_SIZE)
	n, err := connect.Read(buf)
	if err != nil {
		test.Error()
	}
	if !strings.EqualFold("RTSP/1.0 200 OK\r\nCSeq: 6\r\nServer: "+MANUFACTURER+"\r\nSession: 11223344\r\nTransport: RTP/AVP/TCP;unicast;interleaved=0-1;mode=\"play\"\r\n\r\n", string(buf[:n])) {
		test.Error()
	}
	connect.Close()
}

func TestSetupUDP(test *testing.T) {
	ch := make(chan int)
	go func() {
		listener, _ := net.Listen("tcp", "0.0.0.0:8557")
		ch <- 1
		connect, _ := listener.Accept()
		server := RTSPServer{}
		request := RTSPRequest{
			RequestLine: RTSPRequestLine{
				Method:      "SETUP",
				RequestURI:  "rtsp://127.0.0.1:8554/live/test0",
				RTSPVersion: RTSP_VERSION,
			},
			CSeq:      7,
			Transport: "RTP/AVP;client_port=9002-9003",
		}
		sessionCtx := &SessionContext{
			SessionId: "11223344",
			StreamId:  "",
		}
		server.setup(connect, request, sessionCtx, false)
		ch <- 1

	}()

	<-ch
	connect, _ := net.Dial("tcp", "127.0.0.1:8557")
	connect.Write([]byte{0x00, 0x01})

	<-ch
	buf := make([]byte, REQ_RSP_SIZE)
	n, err := connect.Read(buf)
	if err != nil {
		test.Error()
	}
	if !strings.EqualFold("RTSP/1.0 200 OK\r\nCSeq: 7\r\nServer: "+MANUFACTURER+"\r\nSession: 11223344\r\nTransport: RTP/AVP;client_port=9002-9003;mode=\"play\"\r\n\r\n", string(buf[:n])) {
		test.Error()
	}
	connect.Close()
}

func TestSendRTP(test *testing.T) {
	ch := make(chan int)
	go func() {
		listener, _ := net.Listen("tcp", "0.0.0.0:8558")
		ch <- 1
		connect, _ := listener.Accept()
		sessionCtx := &SessionContext{
			SessionId: "11223344",
			StreamId:  "",
		}
		var seq uint16 = 0

		frame := &core.H264ESFrame{
			Data: []byte{0x00, 0x00, 0x00, 0x01, 0x61, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14,
				0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14},
			Timestamp: 12345678,
			IFrame:    true,
		}
		sendRTP(frame, connect, sessionCtx, 0x1234, &seq)

		frame = &core.H264ESFrame{
			Data:      []byte{0x00, 0x00, 0x00, 0x01, 0x61, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14, 0x11, 0x12, 0x13, 0x14},
			Timestamp: 12345678,
			IFrame:    true,
		}
		sendRTP(frame, connect, sessionCtx, 0x1234, &seq)
		ch <- 1
	}()

	<-ch
	connect, _ := net.Dial("tcp", "127.0.0.1:8558")
	connect.Write([]byte{0x00, 0x01})

	<-ch
	buf := make([]byte, REQ_RSP_SIZE)
	_, err := connect.Read(buf)
	if err != nil {
		test.Error()
	}
	connect.Close()
}

func TestTeardown(test *testing.T) {
	ch := make(chan int)
	go func() {
		listener, _ := net.Listen("tcp", "0.0.0.0:8559")
		ch <- 1
		connect, _ := listener.Accept()
		server := RTSPServer{}
		request := RTSPRequest{
			RequestLine: RTSPRequestLine{
				Method:      "TEARDOWN",
				RequestURI:  "rtsp://127.0.0.1:8554/live/test0",
				RTSPVersion: RTSP_VERSION,
			},
			CSeq: 8,
		}
		sessionCtx := &SessionContext{
			SessionId: "11223344",
			StreamId:  "",
		}
		server.teardown(connect, request, sessionCtx, false)
		ch <- 1

	}()

	<-ch
	connect, _ := net.Dial("tcp", "127.0.0.1:8559")
	connect.Write([]byte{0x00, 0x01})

	<-ch
	buf := make([]byte, REQ_RSP_SIZE)
	_, err := connect.Read(buf)
	if err != nil {
		test.Error()
	}
	connect.Close()
}

func TestErrorResponse(test *testing.T) {
	ch := make(chan int)
	go func() {
		listener, _ := net.Listen("tcp", "0.0.0.0:8560")
		ch <- 1
		connect, _ := listener.Accept()
		server := RTSPServer{}
		request := RTSPRequest{
			RequestLine: RTSPRequestLine{
				RequestURI:  "rtsp://127.0.0.1:8554/live/test0",
				RTSPVersion: RTSP_VERSION,
			},
			CSeq: 9,
		}
		sessionCtx := &SessionContext{
			SessionId: "11223344",
			StreamId:  "",
		}
		server.errorResponse(connect, request, 400, sessionCtx)
		ch <- 1

	}()

	<-ch
	connect, _ := net.Dial("tcp", "127.0.0.1:8560")
	connect.Write([]byte{0x00, 0x01})

	<-ch
	buf := make([]byte, REQ_RSP_SIZE)
	_, err := connect.Read(buf)
	if err != nil {
		test.Error()
	}
	connect.Close()
}

func TestParseRequestOptions(test *testing.T) {
	ch := make(chan int)
	go func() {
		listener, _ := net.Listen("tcp", "0.0.0.0:8561")
		ch <- 1
		connect, _ := listener.Accept()
		server := RTSPServer{}
		sessionCtx := &SessionContext{
			SessionId: "11223344",
			StreamId:  "",
		}
		server.parseRequest(connect, sessionCtx, false)
		ch <- 1

	}()

	<-ch
	connect, _ := net.Dial("tcp", "127.0.0.1:8561")
	request := RTSPRequest{
		RequestLine: RTSPRequestLine{
			Method:      "OPTIONS",
			RequestURI:  "rtsp://127.0.0.1:8554/live/test0",
			RTSPVersion: RTSP_VERSION,
		},
		CSeq: 9,
	}
	connect.Write([]byte(request.Marshal()))

	<-ch
	buf := make([]byte, REQ_RSP_SIZE)
	_, err := connect.Read(buf)
	if err != nil {
		test.Error()
	}
	connect.Close()
}

func TestParseRequestDescrtbe(test *testing.T) {
	ch := make(chan int)
	go func() {
		listener, _ := net.Listen("tcp", "0.0.0.0:8562")
		ch <- 1
		connect, _ := listener.Accept()
		server := RTSPServer{}
		sessionCtx := &SessionContext{
			SessionId: "11223344",
			StreamId:  "",
		}
		server.parseRequest(connect, sessionCtx, false)
		ch <- 1

	}()

	<-ch
	connect, _ := net.Dial("tcp", "127.0.0.1:8562")
	request := RTSPRequest{
		RequestLine: RTSPRequestLine{
			Method:      "DESCRIBE",
			RequestURI:  "rtsp://127.0.0.1:8554/live/test0",
			RTSPVersion: RTSP_VERSION,
		},
		CSeq: 9,
	}
	connect.Write([]byte(request.Marshal()))

	<-ch
	buf := make([]byte, REQ_RSP_SIZE)
	_, err := connect.Read(buf)
	if err != nil {
		test.Error()
	}
	connect.Close()
}

func TestParseRequestSetup(test *testing.T) {
	ch := make(chan int)
	go func() {
		listener, _ := net.Listen("tcp", "0.0.0.0:8563")
		ch <- 1
		connect, _ := listener.Accept()
		server := RTSPServer{}
		sessionCtx := &SessionContext{
			SessionId: "11223344",
			StreamId:  "",
		}
		server.parseRequest(connect, sessionCtx, false)
		ch <- 1

	}()

	<-ch
	connect, _ := net.Dial("tcp", "127.0.0.1:8563")
	request := RTSPRequest{
		RequestLine: RTSPRequestLine{
			Method:      "SETUP",
			RequestURI:  "rtsp://127.0.0.1:8554/live/test0",
			RTSPVersion: RTSP_VERSION,
		},
		CSeq:      9,
		Transport: "RTP/AVP/TCP;unicast;interleaved=0-1",
	}
	connect.Write([]byte(request.Marshal()))

	<-ch
	buf := make([]byte, REQ_RSP_SIZE)
	_, err := connect.Read(buf)
	if err != nil {
		test.Error()
	}
	connect.Close()
}
